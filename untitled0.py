# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gr18j6-NFBUzKNxvHEXspizl0kqi4qI9

**THE SPARKS FOUNDATION  (#GRIPSEPTEMPER21)**

Data science and buisness analytics intern


**Task 1- Prediction using Supervised ML**

In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

**AUTHOR- TANVI SAROJ**

DATA SET URL- [http://bit.ly/w-data](https://)
"""

# Commented out IPython magic to ensure Python compatibility.
#importing libraries
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

#load data 
student_data=pd.read_csv('http://bit.ly/w-data')
student_data

student_data.describe()

student_data.shape

#plotting the distribution of scores
student_data.plot(x='Hours', y='Scores' , style='o')
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

from sklearn.model_selection import train_test_split
X = student_data.iloc[:, :-1].values  
y = student_data.iloc[:, 1].values  
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

#training the model
from sklearn.linear_model import LinearRegression  

lin_model  = LinearRegression()  
lin_model.fit(X_train, y_train)

# Plotting the regression line
line = lin_model.coef_*X + lin_model.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.title( 'Regression Line')
plt.plot(X, line);
plt.show()

#prediction
print(X_test)
y_test_predict = lin_model.predict(X_test)

#actual vs predicted
df1 = pd.DataFrame({'ACTUAL': y_test, 'PREDICTED': y_test_predict})
df1

#Evaluating model
#for the training data
from sklearn.metrics import mean_absolute_error
#for testing data
mae = mean_absolute_error(y_test, y_test_predict)

print("Mean absolute error: ")
print('mae is {}'.format(mae))

plt.figure(figsize = (5,5))
plt.scatter(y_test,y_test_predict)
plt.plot([min(y_test_predict),max(y_test_predict)],[min(y_test),max(y_test)])
plt.xlabel('Actual')
plt.ylabel('Predict')

#solution

predicted_score = lin_model.predict([[9.25]])
print('The predicted score for 9.25 study hours is:',predicted_score)